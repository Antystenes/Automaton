
==================== FINAL INTERFACE ====================
2016-11-29 17:44:11.503396941 UTC

interface Automaton-0.1.0.0-6bZeNUyyycTD0CxAwaZN0W:Lib 8001
  interface hash: fa32702d92105fdce4f06932387f2430
  ABI hash: 0441e0868569244f02f36ea3e813d319
  export-list hash: fb72aff9f2a6714aefd0d73eafc25054
  orphan hash: a22fb138ea1c99838534032f76932b81
  flag hash: b159a15c55fa7c6870cb2eb79bbae5a5
  sig of: Nothing
  used TH splices: False
  where
exports:
  Lib.addAcceptState
  Lib.addTransFromList
  Lib.addTransition
  Lib.emptyAutomaton
  Lib.initAutomaton
  Lib.isAccepted
  Lib.parseLines
  Lib.parseString
  Lib.processChar
  Lib.processString
  Lib.readAutomaton
  Lib.readWords
  Lib.toChar
  Lib.tranState
  Lib.Automaton{Lib.Automaton accept state transitions}
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.0.0*
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      hashable-1.2.4.0@hashable-1.2.4.0-GnltDttmBjG9qGzcjuPOH4
                      hashmap-1.3.1.1@hashmap-1.3.1.1-EsEoa0qXwh9DIEDzax73tQ
                      integer-gmp-1.0.0.1
                      text-1.2.2.1@text-1.2.2.1-FgcR4Xf0VlEHD9HLxzq9WJ
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.4.0@hashable-1.2.4.0-GnltDttmBjG9qGzcjuPOH4:Data.Hashable.Generic
         text-1.2.2.1@text-1.2.2.1-FgcR4Xf0VlEHD9HLxzq9WJ:Data.Text
         text-1.2.2.1@text-1.2.2.1-FgcR4Xf0VlEHD9HLxzq9WJ:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-FgcR4Xf0VlEHD9HLxzq9WJ:Data.Text.Show
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.1@text-1.2.2.1-FgcR4Xf0VlEHD9HLxzq9WJ:Data.Text
                         text-1.2.2.1@text-1.2.2.1-FgcR4Xf0VlEHD9HLxzq9WJ:Data.Text.Lazy
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.Functor 6fc476505db88d678632a4a838125f13
import  -/  base-4.9.0.0:Data.OldList 0058409f994fb13ae0616e3f1e5b4dae
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.IO.Handle.FD adf0145182d1c6eb38b2b8ce5a292e84
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:System.Environment ee0914a962f5508d0fd404c89ee4999b
import  -/  base-4.9.0.0:System.IO eb1d40aa793a4047069a5023f2ebcfe3
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Set 3ed2324fd1e757464a8ac2b636a64e5a
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base 7491ab24d955eec25fba8e0d89b657f1
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  hashmap-1.3.1.1@hashmap-1.3.1.1-EsEoa0qXwh9DIEDzax73tQ:Data.HashMap a4b722f95b5e2ec0d87fc8dfc88901ba
e3a2e0a6a0bb92038b4c59f7efbd381d
  $fShowAutomaton :: GHC.Show.Show Lib.Automaton
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lib.Automaton
                  Lib.$fShowAutomaton_$cshowsPrec
                  Lib.$fShowAutomaton_$cshow
                  Lib.$fShowAutomaton_$cshowList -}
e3a2e0a6a0bb92038b4c59f7efbd381d
  $fShowAutomaton1 :: Lib.Automaton -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Lib.Automaton) ->
                 case w of ww { Lib.Automaton ww1 ww2 ww3 ->
                 Lib.$w$cshowsPrec 0# ww1 ww2 ww3 }) -}
daed98e2e73e44f8c18c46e858dc3cdd
  $fShowAutomaton2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
c2ecf7d1a9114dd637107b59b05e1df4
  $fShowAutomaton3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "state = "#) -}
7ef427b0446f98209527baaf0a9b2648
  $fShowAutomaton4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "accept = "#) -}
37ccb2139827f4c90f4ea415a3a9fd99
  $fShowAutomaton5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
b9b2f11cc5b640ae6f5ab2458d9b03ea
  $fShowAutomaton6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "transitions = "#) -}
a99dbbac5076570c1c9da94f010e2310
  $fShowAutomaton7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Automaton {"#) -}
e3a2e0a6a0bb92038b4c59f7efbd381d
  $fShowAutomaton_$cshow :: Lib.Automaton -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Lib.Automaton) ->
                 Lib.$fShowAutomaton_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
e3a2e0a6a0bb92038b4c59f7efbd381d
  $fShowAutomaton_$cshowList :: [Lib.Automaton] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Lib.Automaton
                   Lib.$fShowAutomaton1) -}
e3a2e0a6a0bb92038b4c59f7efbd381d
  $fShowAutomaton_$cshowsPrec ::
    GHC.Types.Int -> Lib.Automaton -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Lib.Automaton) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Lib.Automaton ww3 ww4 ww5 ->
                 Lib.$w$cshowsPrec ww1 ww3 ww4 ww5 } }) -}
47b03fbb3e96b9ef9882dd8d0e7a24c2
  $fShowAutomaton_$s$fShow(,) ::
    GHC.Show.Show ([GHC.Types.Char], GHC.Types.Char)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ ([GHC.Types.Char], GHC.Types.Char)
                  (GHC.Show.$fShow(,)_$cshowsPrec
                     @ [GHC.Types.Char]
                     @ GHC.Types.Char
                     GHC.Show.$fShow[]_$s$fShow[]1
                     GHC.Show.$fShowChar)
                  Lib.$fShowAutomaton_$s$fShow(,)_$cshow
                  Lib.$fShowAutomaton_$s$fShow(,)_$cshowList -}
39a7e46ab6de44732ef5eb05593bdb15
  $fShowAutomaton_$s$fShow(,)_$cshow ::
    ([GHC.Types.Char], GHC.Types.Char) -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,U(U))>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: ([GHC.Types.Char], GHC.Types.Char)) ->
                 GHC.Show.$fShow(,)_$cshowsPrec
                   @ [GHC.Types.Char]
                   @ GHC.Types.Char
                   GHC.Show.$fShow[]_$s$fShow[]1
                   GHC.Show.$fShowChar
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
6a701472e963dfec41e1afd8e14d5606
  $fShowAutomaton_$s$fShow(,)_$cshowList ::
    [([GHC.Types.Char], GHC.Types.Char)] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [([GHC.Types.Char], GHC.Types.Char)])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ ([GHC.Types.Char], GHC.Types.Char)
                   (GHC.Show.$fShow(,)_$cshowsPrec
                      @ [GHC.Types.Char]
                      @ GHC.Types.Char
                      GHC.Show.$fShow[]_$s$fShow[]1
                      GHC.Show.$fShowChar
                      GHC.Show.shows22)
                   eta
                   eta1) -}
12508dbc675e9d52d52b73102d9d391a
  $fShowAutomaton_$s$fShowSet ::
    GHC.Show.Show (Data.Set.Base.Set [GHC.Types.Char])
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Set.Base.Set [GHC.Types.Char])
                  (Data.Set.Base.$fShowSet_$cshowsPrec
                     @ [GHC.Types.Char]
                     GHC.Show.$fShow[]_$s$fShow[]1)
                  Lib.$fShowAutomaton_$s$fShowSet_$cshow
                  Lib.$fShowAutomaton_$s$fShowSet_$cshowList -}
7752f18022e81b4f2391bcee3da6c37b
  $fShowAutomaton_$s$fShowSet_$cshow ::
    Data.Set.Base.Set [GHC.Types.Char] -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Set.Base.Set [GHC.Types.Char]) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n Data.Set.Base.$fShowSet1)
                   (GHC.Show.shows_$s$cshowList
                      (GHC.Base.build
                         @ [GHC.Types.Char]
                         (\ @ b
                            (c :: [GHC.Types.Char] -> b -> b)[OneShot]
                            (n :: b)[OneShot] ->
                          Data.Set.Base.foldrFB @ [GHC.Types.Char] @ b c n x))
                      (GHC.Types.[] @ GHC.Types.Char))) -}
a4ce35c086b6cc40a25c36402ecf2e50
  $fShowAutomaton_$s$fShowSet_$cshowList ::
    [Data.Set.Base.Set [GHC.Types.Char]] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Data.Set.Base.Set [GHC.Types.Char]])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Data.Set.Base.Set [GHC.Types.Char])
                   (Data.Set.Base.$fShowSet_$cshowsPrec
                      @ [GHC.Types.Char]
                      GHC.Show.$fShow[]_$s$fShow[]1
                      GHC.Show.shows22)
                   ls
                   s) -}
db966d116c516b306c11be8fc74cdebd
  $s$fEq(,) :: GHC.Classes.Eq ([GHC.Types.Char], GHC.Types.Char)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ ([GHC.Types.Char], GHC.Types.Char)
                  (GHC.Classes.$fEq(,)_$c==
                     @ [GHC.Types.Char]
                     @ GHC.Types.Char
                     Lib.$s$fEq(,)_$dEq
                     Lib.$s$fEq(,)_$dEq1)
                  (GHC.Classes.$fEq(,)_$c/=
                     @ [GHC.Types.Char]
                     @ GHC.Types.Char
                     Lib.$s$fEq(,)_$dEq
                     Lib.$s$fEq(,)_$dEq1) -}
9af47468567c7a207e9db6d8e89bc4f4
  $s$fEq(,)_$dEq :: GHC.Classes.Eq [GHC.Types.Char]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fEq[]_$s$fEq[]1 -}
eea2e977e84cc96c0fe111c75701c91a
  $s$fEq(,)_$dEq1 :: GHC.Classes.Eq GHC.Types.Char
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) GHC.Classes.$fEqChar -}
7f087a604ad4d9ef74029349011f9f1f
  $s$fHashable(,) ::
    Data.Hashable.Class.Hashable ([GHC.Types.Char], GHC.Types.Char)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ ([GHC.Types.Char], GHC.Types.Char)
                  Lib.$s$fHashable(,)_$s$fHashable(,)_$chashWithSalt
                  Lib.$s$fHashable(,)_$s$fHashable(,)_$chash -}
4fff03ef1efb7873df10ea8ac39233a2
  $s$fHashable(,)_$s$fHashable(,)_$chash ::
    ([GHC.Types.Char], GHC.Types.Char) -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS(S)),1*U(1*U,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: ([GHC.Types.Char], GHC.Types.Char)) ->
                 case ds of wild { (,) a4 a5 ->
                 Data.Hashable.Class.$fHashableChar_$chashWithSalt
                   (Data.Hashable.Class.$fHashable[]_$s$chash a4)
                   a5 }) -}
d4fe735584b629b33a4b3abc931e61b5
  $s$fHashable(,)_$s$fHashable(,)_$chashWithSalt ::
    GHC.Types.Int
    -> ([GHC.Types.Char], GHC.Types.Char) -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(SS(S)),1*U(1*U,1*U(U))>m,
     Unfolding: InlineRule (2, True, False)
                (\ (s :: GHC.Types.Int)
                   (ds :: ([GHC.Types.Char], GHC.Types.Char)) ->
                 case ds of wild { (,) a4 a5 ->
                 Data.Hashable.Class.$fHashableChar_$chashWithSalt
                   (Data.Hashable.Class.$fHashableNonEmpty_$s$chashWithSalt s a4)
                   a5 }) -}
446b14cd2c182102f784e5a6faae3a6e
  $s$fOrd(,) :: GHC.Classes.Ord ([GHC.Types.Char], GHC.Types.Char)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ ([GHC.Types.Char], GHC.Types.Char)
                  Lib.$s$fOrd(,)_$s$fOrd(,)_$cp1Ord
                  (GHC.Classes.$fOrd(,)_$ccompare
                     @ [GHC.Types.Char]
                     @ GHC.Types.Char
                     Lib.$s$fOrd(,)1
                     GHC.Classes.$fOrdChar)
                  (GHC.Classes.$fOrd(,)_$c<
                     @ [GHC.Types.Char]
                     @ GHC.Types.Char
                     Lib.$s$fOrd(,)1
                     GHC.Classes.$fOrdChar)
                  (GHC.Classes.$fOrd(,)_$c<=
                     @ [GHC.Types.Char]
                     @ GHC.Types.Char
                     Lib.$s$fOrd(,)1
                     GHC.Classes.$fOrdChar)
                  (GHC.Classes.$fOrd(,)_$c>
                     @ [GHC.Types.Char]
                     @ GHC.Types.Char
                     Lib.$s$fOrd(,)1
                     GHC.Classes.$fOrdChar)
                  (GHC.Classes.$fOrd(,)_$c>=
                     @ [GHC.Types.Char]
                     @ GHC.Types.Char
                     Lib.$s$fOrd(,)1
                     GHC.Classes.$fOrdChar)
                  (GHC.Classes.$fOrd(,)_$cmax
                     @ [GHC.Types.Char]
                     @ GHC.Types.Char
                     Lib.$s$fOrd(,)1
                     GHC.Classes.$fOrdChar)
                  (GHC.Classes.$fOrd(,)_$cmin
                     @ [GHC.Types.Char]
                     @ GHC.Types.Char
                     Lib.$s$fOrd(,)1
                     GHC.Classes.$fOrdChar) -}
9f2721582890c06183d6beaf9e1c64b1
  $s$fOrd(,)1 :: GHC.Classes.Ord [GHC.Types.Char]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fOrd[]_$s$fOrd[]1 -}
44b12a547ec921340391fa6196420ffe
  $s$fOrd(,)_$s$fOrd(,)_$cp1Ord ::
    GHC.Classes.Eq ([GHC.Types.Char], GHC.Types.Char)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Lib.$s$fEq(,) -}
13e0b5bb2a8ab75a83263a12fc47e469
  $sinsert_$sgo5 ::
    GHC.Base.String
    -> Data.Set.Base.Set GHC.Base.String
    -> Data.Set.Base.Set GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
63b22e7a7e56c9f75da2f0ae0bc55286
  $sintersection1 ::
    Data.Set.Base.Set GHC.Base.String
    -> Data.Set.Base.Set GHC.Base.String
    -> Data.Set.Base.Set GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: (\ (ds :: Data.Set.Base.Set GHC.Base.String)
                   (ds1 :: Data.Set.Base.Set GHC.Base.String) ->
                 case ds of wild {
                   Data.Set.Base.Bin ipv ipv1 ipv2 ipv3
                   -> case ds1 of wild1 {
                        Data.Set.Base.Bin ipv4 ipv5 ipv6 ipv7
                        -> Data.Set.Base.intersection_$shedgeInt
                             @ GHC.Base.String
                             ipv4
                             ipv5
                             ipv6
                             ipv7
                             ipv
                             ipv1
                             ipv2
                             ipv3
                             (Data.Set.Base.NothingS @ GHC.Base.String)
                             (Data.Set.Base.NothingS @ GHC.Base.String)
                             GHC.Classes.$fOrd[]_$s$fOrd[]1
                        Data.Set.Base.Tip -> Data.Set.Base.Tip @ GHC.Base.String }
                   Data.Set.Base.Tip -> Data.Set.Base.Tip @ GHC.Base.String }) -}
1d0c5f242f47557943c212de5dd10a6d
  $tc'Automaton :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8355548237412804656##
                   7972258479730656337##
                   Lib.$trModule
                   Lib.$tc'Automaton1) -}
69ffd2ff419f0735114e02d265e507d0
  $tc'Automaton1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Automaton"#) -}
aba854f4d672dcbabe278c5c54c31650
  $tcAutomaton :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2625856767125604022##
                   5100143325158487415##
                   Lib.$trModule
                   Lib.$tcAutomaton1) -}
bb4937dd6dbe0f8b3d909e86b2ecc169
  $tcAutomaton1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Automaton"#) -}
9e9bbe8aef992d4f3196f6fea21b1852
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Lib.$trModule2 Lib.$trModule1) -}
5d3f858fa280ce235fa2c89af379b2bf
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Lib"#) -}
9cd5f2017374138160185456dcc6c02b
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Automaton-0.1.0.0-6bZeNUyyycTD0CxAwaZN0W"#) -}
31c339e5bdb3ec718632cd85df0bbb6b
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Data.HashMap.Map
         (GHC.Base.String, GHC.Types.Char)
         (Data.Set.Base.Set GHC.Base.String)
    -> Data.Set.Base.Set GHC.Base.String
    -> Data.Set.Base.Set GHC.Base.String
    -> GHC.Show.ShowS
  {- Arity: 4, Strictness: <S,U><L,1*U><L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Data.HashMap.Map
                             (GHC.Base.String, GHC.Types.Char)
                             (Data.Set.Base.Set GHC.Base.String))
                   (ww2 :: Data.Set.Base.Set GHC.Base.String)
                   (ww3 :: Data.Set.Base.Set GHC.Base.String) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = Data.HashMap.$w$cshowsPrec
                       @ (GHC.Base.String, GHC.Types.Char)
                       @ (Data.Set.Base.Set GHC.Base.String)
                       Lib.$fShowAutomaton_$s$fShow(,)
                       Lib.$fShowAutomaton_$s$fShowSet
                       0#
                       ww1
                 } in
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = Data.Set.Base.$w$cshowsPrec
                       @ [GHC.Types.Char]
                       GHC.Show.$fShow[]_$s$fShow[]1
                       0#
                       ww2
                 } in
                 let {
                   f2 :: GHC.Base.String -> GHC.Base.String
                   = Data.Set.Base.$w$cshowsPrec
                       @ [GHC.Types.Char]
                       GHC.Show.$fShow[]_$s$fShow[]1
                       0#
                       ww3
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Lib.$fShowAutomaton7
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Lib.$fShowAutomaton6
                          (f (GHC.Base.++
                                @ GHC.Types.Char
                                Lib.$fShowAutomaton5
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   Lib.$fShowAutomaton4
                                   (f1
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         Lib.$fShowAutomaton5
                                         (GHC.Base.++
                                            @ GHC.Types.Char
                                            Lib.$fShowAutomaton3
                                            (f2
                                               (GHC.Base.++
                                                  @ GHC.Types.Char
                                                  Lib.$fShowAutomaton2
                                                  x)))))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 x)) }) -}
34cd2851d5d3a6c9ad8a930c4dba6428
  $wgo ::
    [GHC.Types.Char]
    -> Data.HashMap.Map
         (GHC.Base.String, GHC.Types.Char)
         (Data.Set.Base.Set GHC.Base.String)
    -> Data.Set.Base.Set GHC.Base.String
    -> Data.Set.Base.Set GHC.Base.String
    -> (# Data.HashMap.Map
            (GHC.Base.String, GHC.Types.Char)
            (Data.Set.Base.Set GHC.Base.String),
          Data.Set.Base.Set GHC.Base.String,
          Data.Set.Base.Set GHC.Base.String #)
  {- Arity: 4, Strictness: <S,1*U><L,U><L,U><L,U>, Inline: [0] -}
a008dfaf310acacc234e39386a559115
  $wgo1 ::
    [[GHC.Types.Char]]
    -> Data.HashMap.Map
         (GHC.Base.String, GHC.Types.Char)
         (Data.Set.Base.Set GHC.Base.String)
    -> Data.Set.Base.Set GHC.Base.String
    -> Data.Set.Base.Set GHC.Base.String
    -> (# Data.HashMap.Map
            (GHC.Base.String, GHC.Types.Char)
            (Data.Set.Base.Set GHC.Base.String),
          Data.Set.Base.Set GHC.Base.String,
          Data.Set.Base.Set GHC.Base.String #)
  {- Arity: 4, Strictness: <S,1*U><L,U><L,U><L,U>, Inline: [0] -}
3d42233c5d5dad06707ae6b07d504159
  $wisAccepted ::
    Data.HashMap.Map
      (GHC.Base.String, GHC.Types.Char)
      (Data.Set.Base.Set GHC.Base.String)
    -> Data.Set.Base.Set GHC.Base.String
    -> Data.Set.Base.Set GHC.Base.String
    -> GHC.Types.Bool
  {- Arity: 3, Strictness: <L,U><S,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: Data.HashMap.Map
                            (GHC.Base.String, GHC.Types.Char)
                            (Data.Set.Base.Set GHC.Base.String))
                   (ww1 :: Data.Set.Base.Set GHC.Base.String)
                   (ww2 :: Data.Set.Base.Set GHC.Base.String) ->
                 case Lib.$sintersection1 ww1 ww2 of wild {
                   Data.Set.Base.Bin dt ds1 ds2 ds3 -> GHC.Types.True
                   Data.Set.Base.Tip
                   -> case Lib.$wprocessChar
                             Lib.toChar2
                             ww
                             ww1
                             ww2 of ww3 { (#,,#) ww4 ww5 ww6 ->
                      case Lib.$sintersection1 ww5 ww6 of wild1 {
                        Data.Set.Base.Bin dt ds1 ds2 ds3 -> GHC.Types.True
                        Data.Set.Base.Tip -> GHC.Types.False } } }) -}
151cd6c23424da29f78d1e7e5a6b9078
  $wprocessChar ::
    GHC.Types.Char
    -> Data.HashMap.Map
         (GHC.Base.String, GHC.Types.Char)
         (Data.Set.Base.Set GHC.Base.String)
    -> Data.Set.Base.Set GHC.Base.String
    -> Data.Set.Base.Set GHC.Base.String
    -> (# Data.HashMap.Map
            (GHC.Base.String, GHC.Types.Char)
            (Data.Set.Base.Set GHC.Base.String),
          Data.Set.Base.Set GHC.Base.String,
          Data.Set.Base.Set GHC.Base.String #)
  {- Arity: 4, Strictness: <L,U(U)><L,U><L,U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Types.Char)
                   (ww :: Data.HashMap.Map
                            (GHC.Base.String, GHC.Types.Char)
                            (Data.Set.Base.Set GHC.Base.String))
                   (ww1 :: Data.Set.Base.Set GHC.Base.String)
                   (ww2 :: Data.Set.Base.Set GHC.Base.String) ->
                 (# ww, ww1,
                    letrec {
                      go5 :: Data.Set.Base.Set GHC.Base.String
                             -> Data.Set.Base.Set GHC.Base.String
                             -> Data.Set.Base.Set GHC.Base.String
                        {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                      = \ (z' :: Data.Set.Base.Set GHC.Base.String)
                          (ds :: Data.Set.Base.Set GHC.Base.String) ->
                        case ds of wild {
                          Data.Set.Base.Bin dt x l r
                          -> case go5 z' r of wild1 {
                               Data.Set.Base.Bin ipv ipv1 ipv2 ipv3
                               -> case w of ww3 { GHC.Types.C# ww4 ->
                                  case Lib.$wtranState ww4 x ww of wild2 {
                                    Data.Set.Base.Bin ipv4 ipv5 ipv6 ipv7
                                    -> go5
                                         (Data.Set.Base.union_$shedgeUnion
                                            @ GHC.Base.String
                                            ipv4
                                            ipv5
                                            ipv6
                                            ipv7
                                            ipv
                                            ipv1
                                            ipv2
                                            ipv3
                                            (Data.Set.Base.NothingS @ GHC.Base.String)
                                            (Data.Set.Base.NothingS @ GHC.Base.String)
                                            GHC.Classes.$fOrd[]_$s$fOrd[]1)
                                         l
                                    Data.Set.Base.Tip -> go5 wild1 l } }
                               Data.Set.Base.Tip
                               -> case w of ww3 { GHC.Types.C# ww4 ->
                                  go5 (Lib.$wtranState ww4 x ww) l } }
                          Data.Set.Base.Tip -> z' }
                    } in
                    go5 (Data.Set.Base.Tip @ GHC.Base.String) ww2 #)) -}
29fcadc5074d5678b45040c2964d3f0a
  $wtranState ::
    GHC.Prim.Char#
    -> GHC.Base.String
    -> Data.HashMap.Map
         (GHC.Base.String, GHC.Types.Char)
         (Data.Set.Base.Set GHC.Base.String)
    -> Data.Set.Base.Set GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,U><S,U>, Inline: [0] -}
e3a2e0a6a0bb92038b4c59f7efbd381d
  data Automaton
    = Automaton {transitions :: Data.HashMap.Map
                                  (GHC.Base.String, GHC.Types.Char)
                                  (Data.Set.Base.Set GHC.Base.String),
                 accept :: Data.Set.Base.Set GHC.Base.String,
                 state :: Data.Set.Base.Set GHC.Base.String}
21edd200e9161bdffbe365213bf02f88
  accept :: Lib.Automaton -> Data.Set.Base.Set GHC.Base.String
  RecSel Left Lib.Automaton
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.Automaton) ->
                 case ds of wild { Lib.Automaton ds1 ds2 ds3 -> ds2 }) -}
422f2e9b6ee527be1821dd26c4b594c5
  addAcceptState :: GHC.Base.String -> Lib.Automaton -> Lib.Automaton
  {- Arity: 2, Strictness: <L,1*U><S,1*U(U,1*U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (ch :: GHC.Base.String) (aut :: Lib.Automaton) ->
                 case aut of wild { Lib.Automaton ds ds1 ds2 ->
                 Lib.Automaton ds (Lib.$sinsert_$sgo5 ch ds1) ds2 }) -}
d6df597798b22e2fb07d3125732bb044
  addTransFromList ::
    [GHC.Base.String] -> Lib.Automaton -> Lib.Automaton
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [GHC.Base.String]) ->
                 case ds of wild {
                   [] -> GHC.Base.id @ Lib.Automaton
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> GHC.Base.id @ Lib.Automaton
                        : y ds2
                        -> case ds2 of wild2 {
                             [] -> GHC.Base.id @ Lib.Automaton
                             : z ds3
                             -> case ds3 of wild3 {
                                  []
                                  -> let {
                                       value :: GHC.Types.Char = Lib.toChar z
                                     } in
                                     let {
                                       lvl21 :: (GHC.Base.String, GHC.Types.Char) = (x, value)
                                     } in
                                     let {
                                       lvl22 :: Data.Set.Base.Set GHC.Base.String
                                       = case y of dt { DEFAULT ->
                                         Data.Set.Base.Bin
                                           @ GHC.Base.String
                                           1#
                                           dt
                                           (Data.Set.Base.Tip @ GHC.Base.String)
                                           (Data.Set.Base.Tip @ GHC.Base.String) }
                                     } in
                                     \ (aut :: Lib.Automaton) ->
                                     case aut of wild4 { Lib.Automaton ds4 ds5 ds6 ->
                                     Lib.Automaton
                                       (Data.HashMap.fromList1
                                          @ (GHC.Base.String, GHC.Types.Char)
                                          @ (Data.Set.Base.Set GHC.Base.String)
                                          Lib.$s$fHashable(,)
                                          Lib.$s$fOrd(,)
                                          lvl21
                                          lvl22
                                          ds4)
                                         `cast`
                                       (Sym (Data.HashMap.N:Map[0]
                                                 <(GHC.Base.String, GHC.Types.Char)>_N
                                                 <Data.Set.Base.Set GHC.Base.String>_R))
                                       ds5
                                       ds6 }
                                  : ipv ipv1 -> GHC.Base.id @ Lib.Automaton } } } }) -}
1a3b622c10474479824ae6ed66af3096
  addTransition ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Types.Char
    -> Lib.Automaton
    -> Lib.Automaton
  {- Arity: 4, Strictness: <L,U><L,1*U><L,U><S,1*U(1*U,U,U)>m,
     Unfolding: InlineRule (4, True, False)
                (\ (beginning :: GHC.Base.String)
                   (ending :: GHC.Base.String)
                   (value :: GHC.Types.Char)
                   (aut :: Lib.Automaton) ->
                 case aut of wild { Lib.Automaton ds ds1 ds2 ->
                 Lib.Automaton
                   (Data.HashMap.fromList1
                      @ (GHC.Base.String, GHC.Types.Char)
                      @ (Data.Set.Base.Set GHC.Base.String)
                      Lib.$s$fHashable(,)
                      Lib.$s$fOrd(,)
                      (beginning, value)
                      (Data.Set.Base.singleton @ GHC.Base.String ending)
                      ds)
                     `cast`
                   (Sym (Data.HashMap.N:Map[0]
                             <(GHC.Base.String, GHC.Types.Char)>_N
                             <Data.Set.Base.Set GHC.Base.String>_R))
                   ds1
                   ds2 }) -}
8730ae4f636328ac4451305ee0f8f689
  emptyAutomaton :: Lib.Automaton
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Lib.Automaton
                   (Data.IntMap.Base.Nil
                      @ (Data.HashMap.Some
                           (GHC.Base.String, GHC.Types.Char)
                           (Data.Set.Base.Set GHC.Base.String)))
                     `cast`
                   (Sym (Data.HashMap.N:Map[0]
                             <(GHC.Base.String, GHC.Types.Char)>_N
                             <Data.Set.Base.Set GHC.Base.String>_R))
                   (Data.Set.Base.Tip @ GHC.Base.String)
                   (Data.Set.Base.Tip @ GHC.Base.String)) -}
41484542d850ceaa9c70c1da610c2e50
  initAutomaton :: Lib.Automaton -> Lib.Automaton
  {- Arity: 1, Strictness: <S,1*U(U,U,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (aut :: Lib.Automaton) ->
                 case aut of wild { Lib.Automaton ds ds1 ds2 ->
                 Lib.Automaton ds ds1 Lib.initAutomaton1 }) -}
25c557227a68225760a654a76640fa38
  initAutomaton1 :: Data.Set.Base.Set [GHC.Types.Char]
  {- Strictness: m1,
     Unfolding: (Data.Set.Base.Bin
                   @ [GHC.Types.Char]
                   1#
                   Lib.initAutomaton_dt
                   (Data.Set.Base.Tip @ [GHC.Types.Char])
                   (Data.Set.Base.Tip @ [GHC.Types.Char])) -}
f11c77483321fe421f8634fde4f7f004
  initAutomaton_dt :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "0"#) -}
7ebc4ca19a1b0bb720a4c303c50a13da
  isAccepted :: Lib.Automaton -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S(LSL),U(U,U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Lib.Automaton) ->
                 case w of ww { Lib.Automaton ww1 ww2 ww3 ->
                 Lib.$wisAccepted ww1 ww2 ww3 }) -}
1562c4c25aa3b092541fd629fbec6409
  parseLines :: [GHC.Base.String] -> Lib.Automaton -> Lib.Automaton
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: [GHC.Base.String]) -> Lib.parseLines_go x) -}
8fb43ebddbb662ed655d4a3c4260c9f1
  parseLines_go ::
    [[GHC.Types.Char]] -> Lib.Automaton -> Lib.Automaton
  {- Arity: 1, Strictness: <S,1*U> -}
1fd439fd02d636545fad188d56f12f3c
  parseString :: GHC.Base.String -> Lib.Automaton -> Lib.Automaton
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (x :: GHC.Base.String) ->
                 let {
                   yolo :: [GHC.Base.String] = Data.OldList.words x
                 } in
                 case GHC.List.$wlenAcc
                        @ [GHC.Types.Char]
                        yolo
                        0# of ww2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># ww2 1#) of wild {
                   GHC.Types.False -> Lib.addAcceptState x
                   GHC.Types.True -> Lib.addTransFromList yolo } }) -}
bb18ff1d344063ea4ff0b95896945c4b
  processChar :: GHC.Types.Char -> Lib.Automaton -> Lib.Automaton
  {- Arity: 2, Strictness: <L,U(U)><S,1*U(U,U,1*U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Char) (w1 :: Lib.Automaton) ->
                 case w1 of ww { Lib.Automaton ww1 ww2 ww3 ->
                 case Lib.$wprocessChar w ww1 ww2 ww3 of ww4 { (#,,#) ww5 ww6 ww7 ->
                 Lib.Automaton ww5 ww6 ww7 } }) -}
031f1c0597ae15bd313198c64e1b3744
  processString :: GHC.Base.String -> Lib.Automaton -> Lib.Automaton
  {- Arity: 2, Strictness: <S,1*U><S,1*U(U,U,U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Base.String) (w1 :: Lib.Automaton) ->
                 case w1 of ww { Lib.Automaton ww1 ww2 ww3 ->
                 case Lib.$wgo w ww1 ww2 ww3 of ww4 { (#,,#) ww5 ww6 ww7 ->
                 Lib.Automaton ww5 ww6 ww7 } }) -}
ef6ecb2c0b0099aee88ce9765073c994
  readAutomaton :: GHC.Types.IO Lib.Automaton
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.readAutomaton1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <Lib.Automaton>_R)) -}
889c55665cf5b8e3e4bce154a0849116
  readAutomaton1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Lib.Automaton #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Types.Bool
                        GHC.IO.Handle.hIsEOF3
                        GHC.IO.Handle.FD.stdin
                        GHC.IO.Handle.hIsEOF2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Bool>_R))
                        s of ds1 { (#,#) ipv ipv1 ->
                 case Lib.readAutomaton2
                        (GHC.Types.[] @ GHC.Base.String)
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 (# ipv2,
                    case Lib.$wgo1
                           ipv3
                           (Data.IntMap.Base.Nil
                              @ (Data.HashMap.Some
                                   (GHC.Base.String, GHC.Types.Char)
                                   (Data.Set.Base.Set GHC.Base.String)))
                             `cast`
                           (Sym (Data.HashMap.N:Map[0]
                                     <(GHC.Base.String, GHC.Types.Char)>_N
                                     <Data.Set.Base.Set GHC.Base.String>_R))
                           (Data.Set.Base.Tip @ GHC.Base.String)
                           (Data.Set.Base.Tip @ GHC.Base.String) of ww { (#,,#) ww1 ww2 ww3 ->
                    Lib.Automaton ww1 ww2 ww3 } #) } }) -}
c39a0ab5fe3eb9f3f0a892dbfdbc04bd
  readAutomaton2 ::
    [GHC.Base.String]
    -> GHC.Types.Bool
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Base.String] #)
  {- Arity: 3, Strictness: <L,U><S,1*U><S,U> -}
e1b803054219b2ac0ec7460ee9bc21bf
  readWords :: GHC.Types.IO [GHC.Base.String]
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.readWords1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <[GHC.Base.String]>_R)) -}
5e44a8a83e0f68f6946226492cb7048f
  readWords1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Base.String] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State#
                             GHC.Prim.RealWorld)[OneShot] ->
                 case System.Environment.getArgs1 eta of ds { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.FD.openFile1
                        (GHC.List.$w!! @ GHC.Base.String ipv1 0#)
                        GHC.IO.IOMode.ReadMode
                        ipv of ds1 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv3
                        ipv2 of ds2 { (#,#) ipv4 ipv5 ->
                 (# ipv4, Data.OldList.lines ipv5 #) } } }) -}
2dd03cc473a2ac62c0b354aa70e80b98
  state :: Lib.Automaton -> Data.Set.Base.Set GHC.Base.String
  RecSel Left Lib.Automaton
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.Automaton) ->
                 case ds of wild { Lib.Automaton ds1 ds2 ds3 -> ds3 }) -}
4304be1307f3a7773f136de3ee0356b2
  toChar :: GHC.Base.String -> GHC.Types.Char
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [GHC.Types.Char]) ->
                 case ds of wild {
                   []
                   -> case Lib.toChar4 of wild1 {
                        GHC.Types.False -> Lib.toChar3 GHC.Types.True -> Lib.toChar2 }
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> x
                        : ipv ipv1
                        -> case GHC.Base.eqString wild Lib.toChar1 of wild2 {
                             GHC.Types.False -> Lib.toChar3
                             GHC.Types.True -> Lib.toChar2 } } }) -}
ad76069be2c36b11faa0d6872d85bd7f
  toChar1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "<eps>"#) -}
68f9a1efeb5335a90d8f97d001c87a9b
  toChar2 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.C# '\8714'#) -}
71f27e39ac5a9ed587987bcffc7562b6
  toChar3 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# ' '#) -}
ae4740ad4cf81acbde6c32489da15317
  toChar4 :: GHC.Types.Bool
  {- Unfolding: (GHC.Base.eqString
                   (GHC.Types.[] @ GHC.Types.Char)
                   Lib.toChar1) -}
564a21819fc2456fcb42233477e26790
  tranState ::
    GHC.Types.Char
    -> GHC.Base.String
    -> Data.HashMap.Map
         (GHC.Base.String, GHC.Types.Char)
         (Data.Set.Base.Set GHC.Base.String)
    -> Data.Set.Base.Set GHC.Base.String
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,U><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Char)
                   (w1 :: GHC.Base.String)
                   (w2 :: Data.HashMap.Map
                            (GHC.Base.String, GHC.Types.Char)
                            (Data.Set.Base.Set GHC.Base.String)) ->
                 case w of ww { GHC.Types.C# ww1 -> Lib.$wtranState ww1 w1 w2 }) -}
8f7732b33c9bbc90a79115d6bed16200
  transitions ::
    Lib.Automaton
    -> Data.HashMap.Map
         (GHC.Base.String, GHC.Types.Char)
         (Data.Set.Base.Set GHC.Base.String)
  RecSel Left Lib.Automaton
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.Automaton) ->
                 case ds of wild { Lib.Automaton ds1 ds2 ds3 -> ds1 }) -}
instance [safe] GHC.Show.Show [Lib.Automaton] = Lib.$fShowAutomaton
"SPEC/Lib $fEq(,) @ [Char] @ Char" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                              [GHC.Types.Char])
                                                   ($dEq1 :: GHC.Classes.Eq GHC.Types.Char)
  GHC.Classes.$fEq(,) @ [GHC.Types.Char] @ GHC.Types.Char $dEq $dEq1
  = Lib.$s$fEq(,)
"SPEC/Lib $fHashable(,) @ [Char] @ Char" [ALWAYS] forall ($dHashable :: Data.Hashable.Class.Hashable
                                                                          [GHC.Types.Char])
                                                         ($dHashable1 :: Data.Hashable.Class.Hashable
                                                                           GHC.Types.Char)
  Data.Hashable.Class.$fHashable(,) @ [GHC.Types.Char]
                                    @ GHC.Types.Char
                                    $dHashable
                                    $dHashable1
  = Lib.$s$fHashable(,)
"SPEC/Lib $fHashable(,)_$chash @ [Char] @ Char" [ALWAYS] forall ($dHashable :: Data.Hashable.Class.Hashable
                                                                                 [GHC.Types.Char])
                                                                ($dHashable1 :: Data.Hashable.Class.Hashable
                                                                                  GHC.Types.Char)
  Data.Hashable.Class.$fHashable(,)_$chash @ [GHC.Types.Char]
                                           @ GHC.Types.Char
                                           $dHashable
                                           $dHashable1
  = Lib.$s$fHashable(,)_$s$fHashable(,)_$chash
"SPEC/Lib $fHashable(,)_$chashWithSalt @ [Char] @ Char" [ALWAYS] forall ($dHashable :: Data.Hashable.Class.Hashable
                                                                                         [GHC.Types.Char])
                                                                        ($dHashable1 :: Data.Hashable.Class.Hashable
                                                                                          GHC.Types.Char)
  Data.Hashable.Class.$fHashable(,)_$chashWithSalt @ [GHC.Types.Char]
                                                   @ GHC.Types.Char
                                                   $dHashable
                                                   $dHashable1
  = Lib.$s$fHashable(,)_$s$fHashable(,)_$chashWithSalt
"SPEC/Lib $fOrd(,) @ [Char] @ Char" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                [GHC.Types.Char])
                                                    ($dOrd1 :: GHC.Classes.Ord GHC.Types.Char)
  GHC.Classes.$fOrd(,) @ [GHC.Types.Char]
                       @ GHC.Types.Char
                       $dOrd
                       $dOrd1
  = Lib.$s$fOrd(,)
"SPEC/Lib $fOrd(,)_$cp1Ord @ [Char] @ Char" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                        [GHC.Types.Char])
                                                            ($dOrd1 :: GHC.Classes.Ord
                                                                         GHC.Types.Char)
  GHC.Classes.$fOrd(,)_$cp1Ord @ [GHC.Types.Char]
                               @ GHC.Types.Char
                               $dOrd
                               $dOrd1
  = Lib.$s$fOrd(,)_$s$fOrd(,)_$cp1Ord
"SPEC/Lib $fShow(,) @ [Char] @ Char" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                  [GHC.Types.Char])
                                                     ($dShow1 :: GHC.Show.Show GHC.Types.Char)
  GHC.Show.$fShow(,) @ [GHC.Types.Char]
                     @ GHC.Types.Char
                     $dShow
                     $dShow1
  = Lib.$fShowAutomaton_$s$fShow(,)
"SPEC/Lib $fShow(,)_$cshow @ [Char] @ Char" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                         [GHC.Types.Char])
                                                            ($dShow1 :: GHC.Show.Show
                                                                          GHC.Types.Char)
  GHC.Show.$fShow(,)_$cshow @ [GHC.Types.Char]
                            @ GHC.Types.Char
                            $dShow
                            $dShow1
  = Lib.$fShowAutomaton_$s$fShow(,)_$cshow
"SPEC/Lib $fShow(,)_$cshowList @ [Char] @ Char" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                             [GHC.Types.Char])
                                                                ($dShow1 :: GHC.Show.Show
                                                                              GHC.Types.Char)
  GHC.Show.$fShow(,)_$cshowList @ [GHC.Types.Char]
                                @ GHC.Types.Char
                                $dShow
                                $dShow1
  = Lib.$fShowAutomaton_$s$fShow(,)_$cshowList
"SPEC/Lib $fShowSet @ [Char]" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                           [GHC.Types.Char])
  Data.Set.Base.$fShowSet @ [GHC.Types.Char] $dShow
  = Lib.$fShowAutomaton_$s$fShowSet
"SPEC/Lib $fShowSet_$cshow @ [Char]" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                  [GHC.Types.Char])
  Data.Set.Base.$fShowSet_$cshow @ [GHC.Types.Char] $dShow
  = Lib.$fShowAutomaton_$s$fShowSet_$cshow
"SPEC/Lib $fShowSet_$cshowList @ [Char]" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                      [GHC.Types.Char])
  Data.Set.Base.$fShowSet_$cshowList @ [GHC.Types.Char] $dShow
  = Lib.$fShowAutomaton_$s$fShowSet_$cshowList
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

